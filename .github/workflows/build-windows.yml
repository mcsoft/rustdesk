name: Build + Installer (Windows 2025)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

env:
  DEFAULT_RENDEZVOUS_SERVER: ${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}
  DEFAULT_RELAY_SERVER: ${{ secrets.DEFAULT_RELAY_SERVER }}
  DEFAULT_RS_PUB_KEY: ${{ secrets.DEFAULT_RS_PUB_KEY }}

jobs:
  build:
    runs-on: windows-2025  # legyen explicit 2025
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Rust (stable-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}\vcpkg\installed
            ${{ github.workspace }}\vcpkg\packages
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: vcpkg + deps
        shell: pwsh
        run: |
          if (!(Test-Path .\vcpkg)) { git clone https://github.com/microsoft/vcpkg }
          .\vcpkg\bootstrap-vcpkg.bat
          $env:VCPKG_ROOT = Join-Path $PWD "vcpkg"
          .\vcpkg\vcpkg.exe install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
          "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append

      # LLVM / libclang: ne choco-val, hanem actionnel (stabilabb a váltáskor)
      - name: Install LLVM & Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "20"
      - name: Export LIBCLANG_PATH
        shell: pwsh
        run: |
          "LIBCLANG_PATH=${{ env.LLVM_PATH }}\bin" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ---------- Build GUI ----------
      - name: Build GUI
        shell: pwsh
        run: |
          cargo build --release
          $sciterUrl = "https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"
          Invoke-WebRequest $sciterUrl -OutFile ".\target\release\sciter.dll"

      - name: Upload GUI binaries
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-gui-binaries
          path: |
            target\release\rustdesk.exe
            target\release\sciter.dll

      # ---------- Build Headless ----------
      - name: Build Headless (service)
        shell: pwsh
        run: cargo build --release --features=nogui

      - name: Upload Headless binaries
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-headless-binaries
          path: target\release\rustdesk-service.exe

      # ---------- Inno Setup .iss generálás ----------
      - name: Prepare .iss files
        shell: pwsh
        run: |
          New-Item -Force -ItemType Directory dist | Out-Null
          $src = Join-Path $PWD "target\release"

          $gui = @'
          [Setup]
          AppName=RustDesk (GUI)
          AppVersion=1.0
          DefaultDirName={pf}\RustDesk
          DefaultGroupName=RustDesk
          OutputBaseFilename=RustDesk-GUI-Setup
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          PrivilegesRequired=admin

          [Files]
          Source: "{#SourceGUI}\rustdesk.exe"; DestDir: "{app}"; Flags: ignoreversion
          Source: "{#SourceGUI}\sciter.dll"; DestDir: "{app}"; Flags: ignoreversion

          [Run]
          Filename: "{app}\rustdesk.exe"; Flags: nowait postinstall skipifsilent

          [Icons]
          Name: "{group}\RustDesk"; Filename: "{app}\rustdesk.exe"
          '@
          $gui | Set-Content dist\installer-gui.iss -Encoding UTF8

          $svc = @'
          [Setup]
          AppName=RustDesk Service (Headless)
          AppVersion=1.0
          DefaultDirName={pf}\RustDeskService
          DefaultGroupName=RustDesk
          OutputBaseFilename=RustDesk-Headless-Setup
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          PrivilegesRequired=admin

          [Files]
          Source: "{#SourceSvc}\rustdesk-service.exe"; DestDir: "{app}"; Flags: ignoreversion

          [Run]
          Filename: "sc"; Parameters: "create RustDeskService binPath= ""{app}\rustdesk-service.exe"" start= auto DisplayName= ""RustDesk Service"""; Flags: runhidden
          Filename: "sc"; Parameters: "start RustDeskService"; Flags: runhidden

          [UninstallRun]
          Filename: "sc"; Parameters: "stop RustDeskService"; Flags: runhidden
          Filename: "sc"; Parameters: "delete RustDeskService"; Flags: runhidden
          '@
          $svc | Set-Content dist\installer-headless.iss -Encoding UTF8

          # átadjuk a forrás-útvonalat makróként
          "SourceGUI=$src" | Set-Content dist\defines-gui.txt
          "SourceSvc=$src" | Set-Content dist\defines-svc.txt

      # Inno Setup telepítés + fordítás akcióval (mert Windows 2025-ön nincs előre telepítve)
      - name: Compile GUI installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: dist/installer-gui.iss
          # Inno Setup makró átadása (/D...), figyelj az idézőjelekre!
          options: '/DSourceGUI="${{ github.workspace }}\target\release"'
          
      - name: Compile Headless installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: dist/installer-headless.iss
          options: '/DSourceSvc="${{ github.workspace }}\target\release"'

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-installers
          path: |
            Output\RustDesk-GUI-Setup.exe
            Output\RustDesk-Headless-Setup.exe

      # Opcionális: gyors diagnosztika, ha bármi bukna
      - name: Debug versions
        if: always()
        shell: pwsh
        run: |
          rustc -V
          cargo -V
          clang --version || $true
          where iscc || $true
