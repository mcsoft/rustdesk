name: Build + Installers (Windows)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

env:
  # Ezeket a Secrets-ben add meg!
  DEFAULT_RENDEZVOUS_SERVER: ${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}
  DEFAULT_RELAY_SERVER: ${{ secrets.DEFAULT_RELAY_SERVER }}
  DEFAULT_RS_PUB_KEY: ${{ secrets.DEFAULT_RS_PUB_KEY }}

jobs:
  build:
    # Új runner image – stabil a 2025-ös környezeten
    runs-on: windows-2025

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Rust (stable-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}\vcpkg\installed
            ${{ github.workspace }}\vcpkg\packages
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: vcpkg + deps (classic mode, robust)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Workspace: $PWD"
          git --version
          if (!(Test-Path ".\vcpkg")) {
            git -c core.longpaths=true clone https://github.com/microsoft/vcpkg ".\vcpkg"
          }
          # bootstrap-et CMD-ből indítjuk, ez a legmegbízhatóbb .bat futtatásra
          cmd /c ".\vcpkg\bootstrap-vcpkg.bat -disableMetrics"
          if (!(Test-Path ".\vcpkg\vcpkg.exe")) {
            Get-ChildItem -Recurse .\vcpkg | Out-Host
            throw "vcpkg.exe not found after bootstrap"
          }
          $env:VCPKG_ROOT = Join-Path $PWD "vcpkg"
          "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          .\vcpkg\vcpkg.exe version
          # Manifeszt miatt: kényszerítsük klasszikus módra
          .\vcpkg\vcpkg.exe install --classic --triplet x64-windows-static libvpx libyuv opus aom

      - name: Install LLVM & Clang (for bindgen)
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "20"
      - name: Export LIBCLANG_PATH
        shell: pwsh
        run: |
          "LIBCLANG_PATH=${{ env.LLVM_PATH }}\bin" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ---------- Build GUI ----------
      - name: Build RustDesk (GUI)
        shell: pwsh
        run: |
          cargo build --release
          # Sciter DLL a futtatható mellé
          $sciterUrl = "https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"
          Invoke-WebRequest $sciterUrl -OutFile ".\target\release\sciter.dll" -UseBasicParsing

      - name: Upload binaries (GUI)
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-gui-binaries
          path: |
            target\release\rustdesk.exe
            target\release\sciter.dll

      # ---------- Inno Setup .iss generálás (GUI + Headless) ----------
      - name: Prepare Inno Setup scripts
        shell: pwsh
        run: |
          New-Item -Force -ItemType Directory dist | Out-Null
          New-Item -Force -ItemType Directory Output | Out-Null

          $src = Join-Path $PWD "target\release"
          $out = Join-Path $PWD "Output"

          # GUI installer
          $gui = @'
          [Setup]
          AppName=RustDesk (GUI)
          AppVersion=1.0
          DefaultDirName={pf}\RustDesk
          DefaultGroupName=RustDesk
          OutputBaseFilename=RustDesk-GUI-Setup
          OutputDir={OUT}
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          PrivilegesRequired=admin

          [Files]
          Source: "{SRC}\rustdesk.exe"; DestDir: "{app}"; Flags: ignoreversion
          Source: "{SRC}\sciter.dll";   DestDir: "{app}"; Flags: ignoreversion

          [Run]
          Filename: "{app}\rustdesk.exe"; Flags: nowait postinstall skipifsilent

          [Icons]
          Name: "{group}\RustDesk"; Filename: "{app}\rustdesk.exe"
          '@
          $gui = $gui.Replace('{SRC}', $src).Replace('{OUT}', $out)
          $gui | Set-Content dist\installer-gui.iss -Encoding UTF8

          # Headless = ugyanaz a bináris, service-ként telepítve
          $svc = @'
          [Setup]
          AppName=RustDesk Service (Headless)
          AppVersion=1.0
          DefaultDirName={pf}\RustDesk
          DefaultGroupName=RustDesk
          OutputBaseFilename=RustDesk-Headless-Setup
          OutputDir={OUT}
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          PrivilegesRequired=admin

          [Files]
          Source: "{SRC}\rustdesk.exe"; DestDir: "{app}"; Flags: ignoreversion
          Source: "{SRC}\sciter.dll";  DestDir: "{app}"; Flags: ignoreversion

          [Run]
          ; Szolgáltatás telepítése és indítása
          Filename: "{app}\rustdesk.exe"; Parameters: "--install-service"; Flags: runhidden
          Filename: "sc"; Parameters: "start ""RustDesk Service"""; Flags: runhidden

          [UninstallRun]
          Filename: "sc"; Parameters: "stop ""RustDesk Service"""; Flags: runhidden
          Filename: "sc"; Parameters: "delete ""RustDesk Service"""; Flags: runhidden
          '@
          $svc = $svc.Replace('{SRC}', $src).Replace('{OUT}', $out)
          $svc | Set-Content dist\installer-headless.iss -Encoding UTF8

      # Inno Setup fordítás (pinned action)
      - name: Compile GUI installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: dist/installer-gui.iss

      - name: Compile Headless installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: dist/installer-headless.iss

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-installers
          path: |
            Output\RustDesk-GUI-Setup.exe
            Output\RustDesk-Headless-Setup.exe

      # Debug – ha bármi félremegy, ez segít
      - name: List outputs (debug-safe)
        if: always()
        continue-on-error: true
        shell: pwsh
        run: |
          Write-Host "Output (repo root):"
          if (Test-Path .\Output) {
            Get-ChildItem -Recurse -File .\Output | Select-Object FullName, Length, LastWriteTime
          } else {
            Write-Host "(not found)"
          }
          Write-Host "dist\Output (legacy, not used here):"
          if (Test-Path .\dist\Output) {
            Get-ChildItem -Recurse -File .\dist\Output | Select-Object FullName, Length, LastWriteTime
          } else {
            Write-Host "(not present)"
          }
