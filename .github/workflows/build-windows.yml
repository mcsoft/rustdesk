name: Build + Installers (Windows)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

env:
  DEFAULT_RENDEZVOUS_SERVER: ${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}
  DEFAULT_RELAY_SERVER: ${{ secrets.DEFAULT_RELAY_SERVER }}
  DEFAULT_RS_PUB_KEY: ${{ secrets.DEFAULT_RS_PUB_KEY }}

jobs:
  build:
    runs-on: windows-2025

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Rust (stable-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      # ---- vcpkg beállítás ----
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: ${{ github.workspace }}\vcpkg
          doNotCache: true

      - name: Install vcpkg deps (classic mode)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $env:VCPKG_ROOT = "$env:GITHUB_WORKSPACE\vcpkg"
          "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          & "$env:VCPKG_ROOT\vcpkg.exe" version
          & "$env:VCPKG_ROOT\vcpkg.exe" install --classic --triplet x64-windows-static libvpx libyuv opus aom

      # ---- LLVM / libclang bindgenhez ----
      - name: Install LLVM & Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "20"
      - name: Export LIBCLANG_PATH
        shell: pwsh
        run: |
          "LIBCLANG_PATH=${{ env.LLVM_PATH }}\bin" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ---- Build (GUI) ----
      - name: Build RustDesk (GUI)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          cargo build --release
          # Sciter DLL a futtatható mellé
          $sciterUrl = "https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"
          Invoke-WebRequest $sciterUrl -OutFile ".\target\release\sciter.dll" -UseBasicParsing

      - name: Upload binaries (GUI)
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-gui-binaries
          path: |
            target\release\rustdesk.exe
            target\release\sciter.dll

      # ---- Inno Setup scriptek (HERE-STRING NÉLKÜL) ----
      - name: Prepare Inno Setup scripts
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -Force -ItemType Directory dist | Out-Null
          New-Item -Force -ItemType Directory Output | Out-Null

          $src = Join-Path $PWD "target\release"
          $out = Join-Path $PWD "Output"

          $guiLines = @(
            '[Setup]',
            'AppName=RustDesk (GUI)',
            'AppVersion=1.0',
            'DefaultDirName={pf}\RustDesk',
            'DefaultGroupName=RustDesk',
            'OutputBaseFilename=RustDesk-GUI-Setup',
            'OutputDir={OUT}',
            'Compression=lzma',
            'SolidCompression=yes',
            'ArchitecturesInstallIn64BitMode=x64',
            'PrivilegesRequired=admin',
            '',
            '[Files]',
            'Source: "{SRC}\rustdesk.exe"; DestDir: "{app}"; Flags: ignoreversion',
            'Source: "{SRC}\sciter.dll";   DestDir: "{app}"; Flags: ignoreversion',
            '',
            '[Run]',
            'Filename: "{app}\rustdesk.exe"; Flags: nowait postinstall skipifsilent',
            '',
            '[Icons]',
            'Name: "{group}\RustDesk"; Filename: "{app}\rustdesk.exe"'
          )
          $guiText = ($guiLines -join "`r`n").Replace('{SRC}', $src).Replace('{OUT}', $out)
          Set-Content -LiteralPath dist\installer-gui.iss -Value $guiText -Encoding UTF8

          $svcLines = @(
            '[Setup]',
            'AppName=RustDesk Service (Headless)',
            'AppVersion=1.0',
            'DefaultDirName={pf}\RustDesk',
            'DefaultGroupName=RustDesk',
            'OutputBaseFilename=RustDesk-Headless-Setup',
            'OutputDir={OUT}',
            'Compression=lzma',
            'SolidCompression=yes',
            'ArchitecturesInstallIn64BitMode=x64',
            'PrivilegesRequired=admin',
            '',
            '[Files]',
            'Source: "{SRC}\rustdesk.exe"; DestDir: "{app}"; Flags: ignoreversion',
            'Source: "{SRC}\sciter.dll";  DestDir: "{app}"; Flags: ignoreversion',
            '',
            '[Run]',
            'Filename: "{app}\rustdesk.exe"; Parameters: "--install-service"; Flags: runhidden',
            'Filename: "sc"; Parameters: "start ""RustDesk Service"""; Flags: runhidden',
            '',
            '[UninstallRun]',
            'Filename: "sc"; Parameters: "stop ""RustDesk Service"""; Flags: runhidden',
            'Filename: "sc"; Parameters: "delete ""RustDesk Service"""; Flags: runhidden'
          )
          $svcText = ($svcLines -join "`r`n").Replace('{SRC}', $src).Replace('{OUT}', $out)
          Set-Content -LiteralPath dist\installer-headless.iss -Value $svcText -Encoding UTF8

      # ---- Inno fordítás ----
      - name: Compile GUI installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: dist/installer-gui.iss

      - name: Compile Headless installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: dist/installer-headless.iss

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-installers
          path: |
            Output\RustDesk-GUI-Setup.exe
            Output\RustDesk-Headless-Setup.exe

      - name: List outputs (debug-safe)
        if: always()
        continue-on-error: true
        shell: pwsh
        run: |
          Write-Host "Output (repo root):"
          if (Test-Path .\Output) {
            Get-ChildItem -Recurse -File .\Output | Select-Object FullName, Length, LastWriteTime
          } else {
            Write-Host "(not found)"
          }
