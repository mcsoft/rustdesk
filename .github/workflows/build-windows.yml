name: Build + Installer (Windows, GUI & Headless)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

env:
  DEFAULT_RENDEZVOUS_SERVER: ${{ secrets.DEFAULT_RENDEZVOUS_SERVER }}
  DEFAULT_RELAY_SERVER: ${{ secrets.DEFAULT_RELAY_SERVER }}
  DEFAULT_RS_PUB_KEY: ${{ secrets.DEFAULT_RS_PUB_KEY }}

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust (stable-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}\vcpkg\installed
            ${{ github.workspace }}\vcpkg\packages
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Bootstrap vcpkg + install deps
        shell: pwsh
        run: |
          if (!(Test-Path .\vcpkg)) { git clone https://github.com/microsoft/vcpkg }
          .\vcpkg\bootstrap-vcpkg.bat
          $env:VCPKG_ROOT = Join-Path $PWD "vcpkg"
          .\vcpkg\vcpkg.exe install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
          "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install LLVM (for bindgen/libclang)
        shell: pwsh
        run: |
          choco install -y llvm
          $llvm = "C:\Program Files\LLVM\bin"
          "LIBCLANG_PATH=$llvm" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PATH=$llvm;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ---------- Build GUI ----------
      - name: Build GUI (release)
        shell: pwsh
        run: |
          cargo build --release
          $sciterUrl = "https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"
          Invoke-WebRequest $sciterUrl -OutFile ".\target\release\sciter.dll"

      - name: Upload artifact - GUI binaries
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-gui-binaries
          path: |
            target\release\rustdesk.exe
            target\release\sciter.dll

      # ---------- Build Headless ----------
      - name: Build Headless (service, release)
        shell: pwsh
        run: |
          cargo build --release --features=nogui

      - name: Upload artifact - Headless binaries
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-headless-binaries
          path: |
            target\release\rustdesk-service.exe

      # ---------- Prepare Inno Setup scripts ----------
      - name: Prepare Inno Setup scripts
        shell: pwsh
        run: |
          New-Item -Force -ItemType Directory dist | Out-Null

          @'
          [Setup]
          AppName=RustDesk (GUI)
          AppVersion=1.0
          DefaultDirName={pf}\RustDesk
          DefaultGroupName=RustDesk
          OutputBaseFilename=RustDesk-GUI-Setup
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          PrivilegesRequired=admin

          [Files]
          Source: "{#SourceGUI}\rustdesk.exe"; DestDir: "{app}"; Flags: ignoreversion
          Source: "{#SourceGUI}\sciter.dll"; DestDir: "{app}"; Flags: ignoreversion

          [Run]
          Filename: "{app}\rustdesk.exe"; Description: "Indítás a telepítés után"; Flags: nowait postinstall skipifsilent

          [Icons]
          Name: "{group}\RustDesk"; Filename: "{app}\rustdesk.exe"
          '@ | Set-Content dist\installer-gui.iss

          @'
          [Setup]
          AppName=RustDesk Service (Headless)
          AppVersion=1.0
          DefaultDirName={pf}\RustDeskService
          DefaultGroupName=RustDesk
          OutputBaseFilename=RustDesk-Headless-Setup
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          PrivilegesRequired=admin

          [Files]
          Source: "{#SourceSvc}\rustdesk-service.exe"; DestDir: "{app}"; Flags: ignoreversion

          [Run]
          Filename: "sc"; Parameters: "create RustDeskService binPath= ""{app}\rustdesk-service.exe"" start= auto DisplayName= ""RustDesk Service"""; Flags: runhidden
          Filename: "sc"; Parameters: "start RustDeskService"; Flags: runhidden

          [UninstallRun]
          Filename: "sc"; Parameters: "stop RustDeskService"; Flags: runhidden
          Filename: "sc"; Parameters: "delete RustDeskService"; Flags: runhidden
          '@ | Set-Content dist\installer-headless.iss

          # Defines (for both installers)
          $defines = @"
          #define SourceGUI "{0}"
          #define SourceSvc "{1}"
          "@ -f (Join-Path $PWD "target\release"), (Join-Path $PWD "target\release")
          $defines | Set-Content dist\defines.iss

      - name: Install Inno Setup
        shell: pwsh
        run: choco install -y innosetup

      - name: Compile installers (ISCC)
        shell: pwsh
        run: |
          $iscc = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          & "$iscc" "/Qp" "/Sdist\defines.iss" "dist\installer-gui.iss"
          & "$iscc" "/Qp" "/Sdist\defines.iss" "dist\installer-headless.iss"

      - name: Upload artifact - Installers
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-installers
          path: |
            Output\RustDesk-GUI-Setup.exe
            Output\RustDesk-Headless-Setup.exe
